import numpy as np
import matplotlib.pyplot as plt
import h5py   ##用于与h5形式存储的数据集进行交互
import scipy  ##scipy和PIL用于测试模型效果
from PIL import Image
from scipy import ndimage
from lr_utils import load_dataset

# function sigmoid
def sigmoid(x):
    s=1.0/(1+np.exp(-x))
    return s

#function init_param_with_zero
def init_param_with_zero(dim):
    w=np.zeros((dim,1))
    b=0
    assert(w.shape==(dim,1))
    assert(isinstance(b,float) or isinstance(b,int))
    return w,b


def predict(w, b, X):
    m = X.shape[1]  # shape[1] 表示输入的样本数
    Y_prediction = np.zeros((1, m))
    w = w.reshape(X.shape[0], 1)
    A = sigmoid(np.dot(w.T, X) + b)

    for i in range(A.shape[1]):
        if A[0, i] > 0.5:
            Y_prediction[0, i] = 1
        else:
            Y_prediction[0, i] = 0
    assert (Y_prediction.shape == (1, m))
    return Y_prediction

# gradient function
def propagate(w, b, X, Y):
    m = X.shape[1]
    A = sigmoid(np.dot(w.T, X) + b)
    cost = -1 / m * np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A))
    dw = 1.0 / m * np.dot(X, (A - Y).T)
    db = (1.0 / m) * np.sum(A - Y)

    assert (dw.shape == w.shape)
    assert (db.dtype == float)
    cost = np.squeeze(cost)
    assert (cost.shape == ())
    grads = {
        "dw": dw,
        "db": db
    }
    return grads, cost

def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost=False):
    costs = []

    for i in range(num_iterations):
        grads, cost = propagate(w, b, X, Y)

        dw = grads["dw"]
        db = grads["db"]

        w = w - learning_rate * dw
        b = b - learning_rate * db

        if i % 100 == 0:
            costs.append(cost)

        if print_cost and i % 100 == 0:
            print("cost after iteration %i:%f" %(i, cost))

    params = {
        "w": w,
        "b": b
    }
    grads = {
        "dw": dw,
        "db": db
    }
    return params, grads, costs

def model(X_train, Y_train, X_test, Y_test, num_iterations=2000, learning_rate=0.5, print_cost=False):
    w, b = init_param_with_zero(X_train.shape[0])
    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)
    w = parameters["w"]
    b = parameters["b"]

    Y_prediction_test = predict(w, b, X_test)
    Y_prediction_train = predict(w, b, X_train)

    print("train accuracy:{}%".format(100 - np.mean(np.abs(Y_prediction_train - Y_train) * 100)))
    print("test accuracy:{}%".format(100 - np.mean(np.abs(Y_prediction_test - Y_test) * 100)))

    d = {
        "costs": costs,
        "Y_prediction_test": Y_prediction_test,
        "Y_prediction_train": Y_prediction_train,
        "w": w,
        "b": b,
        "learning_rate": learning_rate,
        "num_iterations": num_iterations
    }
    return d



train_set_x_orig,train_set_y,test_set_x_orig,test_set_y,classes=load_dataset()

m_train = train_set_x_orig.shape[0]  #209
m_test = test_set_x_orig.shape[0]  #
num_px = train_set_x_orig.shape[1]


train_set_x_flatten=train_set_x_orig.reshape(-1,train_set_x_orig.shape[1]*train_set_x_orig.shape[2]*3).T
test_set_x_flatten=test_set_x_orig.reshape(-1,test_set_x_orig.shape[1]*test_set_x_orig.shape[2]*3).T

train_set_x=train_set_x_flatten/255
test_set_x=test_set_x_flatten/255

d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)

my_image="pig.jpg"
fname="images/"+my_image
image=np.array(ndimage.imread(fname,flatten=False))
my_image=scipy.misc.imresize(image,size=(num_px,num_px)).reshape((1,num_px*num_px*3)).T
my_predicted_image=predict(d["w"],d["b"],my_image)

plt.imshow(image)
print("y="+str(np.squeeze(my_predicted_image))+",your algorithm predicts a\""+classes[int(np.squeeze(my_predicted_image)),].decode('utf-8')+"\"picture")
